name: Release ALXR nightly

env:
  CARGO_TERM_COLOR: always

on:
  workflow_dispatch:
  schedule:
    - cron: "0 22 * * *"

jobs:
  prepare_release:
    runs-on: windows-2022
    outputs:
      release_ref: ${{ steps.output_ref.outputs.release_ref }}
      upload_url: ${{ steps.create_alxr_release.outputs.upload_url }}
      release_id: ${{ steps.create_alxr_release.outputs.id }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: "korejan/ALVR"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Generate tag, set release ref
        id: output_ref
        env:
          RUST_BACKTRACE: 1
        run: |
          $out = cargo xtask bump-alxr-versions --nightly
          echo $out
          echo "::set-output name=version_tag::$(echo $out | sls -CaseSensitive -Pattern '^v.*$')"
          echo "::set-output name=release_ref::$(git rev-parse HEAD)"

      - name: Create ALXR Release
        id: create_alxr_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Release tag is taken from the gen_tag job.
          tag_name: ${{ steps.output_ref.outputs.version_tag }}
          release_name:  ${{ steps.output_ref.outputs.version_tag }}
          # TODO: gather commit output_ref to post here in the body
          body: |
            Nightly release of ALXR: ${{ steps.output_ref.outputs.version_tag }}
            Generated from commit: korejan/ALVR@${{ steps.output_ref.outputs.release_ref }}
            
            **Please note:**
            **only server builds here are compatible.**
            **alxr-client.apk for any android based headset except Pico (install alxr-client-pico.apk instead)**
            
          draft: true
          prerelease: false
  
  build_windows_server:
    runs-on: windows-2022
    needs: [prepare_release]
    env:
      # For bindgen to find libclang.dll, we need to give it the path to the Visual Studio package.
      # This is specific to the GitHub windows-2019 runner.
      LIBCLANG_PATH: 'C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/Llvm/x64/bin/libclang.dll'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: "korejan/ALVR"
          ref: v18-server-mod
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup update
      - uses: Swatinem/rust-cache@v2
        with:
          cache-targets: "false"
      
      - name: Download WiX 3.14 binaries
        run: |
          Invoke-WebRequest https://github.com/wixtoolset/wix3/releases/download/wix314rtm/wix314-binaries.zip -OutFile wix314-binaries.zip
          Expand-Archive -Path wix314-binaries.zip -DestinationPath wix314-binaries/bin
      
      - name: Build and package ALVR (.zip, .exe)
        id: build
        env:
          WIX: "wix314-binaries"
          RUST_BACKTRACE: 1
        run: |
          cargo xtask build-windows-deps
          cargo xtask publish-server --gpl
          $file = Get-ChildItem -Name .\build\*.exe | Select-Object -f 1
          echo "::set-output name=exe_filename::$file"
      
      # Assets upload: .exe, .zip
      - name: Upload Windows installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/${{ steps.build.outputs.exe_filename }}
          asset_name: ${{ steps.build.outputs.exe_filename }}
          asset_content_type: application/octet-stream
      
      - name: Upload portable server for Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alvr_server_windows.zip
          asset_name: alvr_server_windows.zip
          asset_content_type: application/zip
  
   build_linux_server:
     runs-on: ubuntu-22.04
     needs: [prepare_release]
     steps:
       - name: Checkout code
         uses: actions/checkout@v3
         with:
           repository: "korejan/ALVR"
           ref: v18-server-mod
       - uses: actions-rs/toolchain@v1
         with:
           toolchain: stable
           override: true
       - run: rustup update
       - uses: Swatinem/rust-cache@v2
         with:
           cache-targets: "false"
      
       - name: Build and install dependencies
         env:
           RUST_BACKTRACE: 1
         run: |
           sudo apt update
           # ALVR/FFMPEG specific depends.
           sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libjack-jackd2-dev libgtk-3-dev libunwind-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit
           # ALXR specific depends.
           sudo apt install git ninja-build libxxf86vm-dev libxcb-glx0-dev libcjson-dev glslang-dev glslang-tools -y
           cp packaging/deb/cuda.pc /usr/share/pkgconfig
      
       - name: Build and package ALVR (.tar.gz)
         id: build
         env:
           RUST_BACKTRACE: 1
         run: |
           cargo xtask build-server --release --bundle-ffmpeg --gpl
           tar -czvf ./build/alvr_server_linux.tar.gz -C ./build/alvr_server_linux .
      
       - name: Upload portable server for Linux
         uses: actions/upload-release-asset@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           upload_url: ${{ needs.prepare_release.outputs.upload_url }}
           asset_path: ./build/alvr_server_linux.tar.gz
           asset_name: alvr_server_linux.tar.gz
           asset_content_type: application/gzip
 
 
  publish_release:
    runs-on: ubuntu-22.04
    needs:
      [
        prepare_release,
        build_linux_server
      ]
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.prepare_release.outputs.release_id }}
